{"version":3,"sources":["assets/logo.svg","util/format_food_item_data.js","util/getQueryParamsFromHistory.js","AppContext.js","Sidebar/ServingSizeSelectionRow.js","Sidebar/SidebarFoodCard.js","Sidebar/SidebarFoodList.js","Searchbar/Searchbar.js","Sidebar/Sidebar.js","NutritionFacts/NutritionFactsTable.js","NutritionFacts/NutritionFactsHistogram.js","NutritionFacts/NutritionFactsPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MIN_QUANTITY","MAX_QUANTITY","missingData","value","percentage","formatFoodItemData","foodItemData","nutritionFactTable","nutritionFactsByKey","selectedQuantity","selectedWeightIndex","ratio","_","toNumber","wt_arr","key","dailyValue","base","Math","round","nutritionFactsFromFoodData","calories","totalFat","saturatedFat","transFat","cholesterol","sodium","totalCarbohydrates","fiber","sugar","addedSugar","protein","vitaminC","vitaminD","iron","calcium","potassium","phosphorus","calculateNutritionalFactTable","id","ndbstring","name","names","formatFoodItemDataFromQueryParams","itemData","servingWeight","quantity","validQuantity","weightIndex","indexOf","code_arr","weightIndexFromServingWeight","history","a","location","query","URLSearchParams","search","foodId","get","Number","idToNameMap","foodName","AppContext","createContext","Provider","DEFAULT_SELECTED","UrlUpdateStrategy","REPLACE","PUSH","NONE","Option","Select","ServingSizeSelectionRow","className","useContext","updateFoodWithSelectedQuantity","updateFoodWithSelectedWeight","servingDescriptions","servingWeights","map","toInteger","servings","zip","description","weight","selectedWeight","align","span","min","max","placeholder","onChange","CloseOutlined","flex","style","width","dropdownMatchSelectWidth","serving","index","SidebarFoodCard","clearFoodItemData","closeButton","title","type","icon","onClick","size","extra","SideBarFoodList","dataSource","renderItem","item","Item","Searchbar","useState","searchValue","setSearchValue","foodItems","setFoodItems","fetchFoodItemData","searchFoodItems","debounce","foodSearchString","isEmpty","undefined","Axios","then","foodResponseItems","data","trim","split","allowClear","showSearch","showArrow","notFoundContent","filterOption","onSearch","searchedFoodItem","console","log","foodItem","substringToHighlight","caseInsensitiveGlobalSearch","RegExp","replace","text","substring","foodItemWithHighlights","Sidebar","SidebarFoodList","NutritionFactsTable","justify","NutritionFactsHistogram","WATER","FAT","CHOCDF","PROCNT","ALC","informationPresent","water","fat","carbs","alcohol","containsAlcohol","componentTotal","waterPercentage","fatPercentage","carbsPercentage","proteinPercentage","alcoholPercentage","height","NutritionFactsPanel","isMobile","displayDrawer","setDisplayDrawer","placement","closable","onClose","visible","longname","datatype","Header","Layout","Content","Footer","Sider","App","toggleMobile","minHeight","href","src","logo","alt","breakpoint","collapsedWidth","trigger","onCollapse","Boolean","window","hostname","match","ReactDOM","render","children","setFoodItemData","setIsMobile","useHistory","foodItemName","formatResponse","foodItemDataWithDefaultSelected","urlUpdateStrategy","formatAndUpdateFoodItemData","updateFoodItemDataFromQueryParams","getQueryParamsFromHistory","formattedFoodData","servingCode","queryString","push","updateUrlWithFood","useEffect","listen","action","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2aa8b64e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8357fd40.svg\";","import _ from \"lodash\";\n\nconst MIN_QUANTITY = 1;\nconst MAX_QUANTITY = 10000;\n\nfunction formatFoodItemData(foodItemData) {\n  const nutritionFactTable = calculateNutritionalFactTable(foodItemData);\n\n  return {\n    ...foodItemData,\n    id: foodItemData.ndbstring,\n    name: foodItemData.names[0],\n    nutritionFactTable,\n  };\n}\n\nfunction calculateNutritionalFactTable(foodItemData) {\n  const nutritionFactsByKey = nutritionFactsFromFoodData(foodItemData);\n\n  return {\n    calories: nutritionFactsByKey(\"ENERC_KCAL\", 2000),\n    totalFat: nutritionFactsByKey(\"FAT\", 65),\n    saturatedFat: nutritionFactsByKey(\"FASAT\", 20),\n    transFat: nutritionFactsByKey(\"FATRN\"),\n    cholesterol: nutritionFactsByKey(\"CHOLE\", 300),\n    sodium: nutritionFactsByKey(\"NA\", 2400),\n    totalCarbohydrates: nutritionFactsByKey(\"CHOCDF\", 300),\n    fiber: nutritionFactsByKey(\"FIBTG\", 25),\n    sugar: nutritionFactsByKey(\"SUGAR\", 50),\n    addedSugar: nutritionFactsByKey(\"ADD_SG\", 50),\n    protein: nutritionFactsByKey(\"PROCNT\", 50),\n    vitaminC: nutritionFactsByKey(\"VITC\", 90),\n    vitaminD: nutritionFactsByKey(\"VITD\", 20),\n    iron: nutritionFactsByKey(\"FE\", 18),\n    calcium: nutritionFactsByKey(\"CA\", 1300),\n    potassium: nutritionFactsByKey(\"K\", 4700),\n    phosphorus: nutritionFactsByKey(\"P\", 1250),\n  };\n}\n\nconst missingData = { value: \"~\", percentage: \"~\" };\n\nfunction nutritionFactsFromFoodData(foodItemData) {\n  const { selectedQuantity, selectedWeightIndex } = foodItemData;\n  const ratio = _.toNumber(foodItemData.wt_arr[selectedWeightIndex]) / 100;\n\n  return (key, dailyValue = 1) => {\n    if (!foodItemData[key][0]) return missingData;\n\n    const base = _.toNumber(foodItemData[key]) * ratio * selectedQuantity;\n\n    return {\n      value: Math.round((base * 10) / 10),\n      percentage: Math.round((base / (1.0 * dailyValue)) * 100),\n    };\n  };\n}\n\nexport default formatFoodItemData;\n\nfunction validQuantity(quantity) {\n  if (quantity >= MIN_QUANTITY && quantity <= MAX_QUANTITY) {\n    return quantity;\n  }\n\n  return MIN_QUANTITY;\n}\n\nfunction weightIndexFromServingWeight(foodItemData, servingWeight) {\n  const weightIndex = _.indexOf(foodItemData.code_arr, servingWeight);\n\n  if (weightIndex < 0) {\n    return 0;\n  }\n\n  return weightIndex;\n}\n\nexport function formatFoodItemDataFromQueryParams(\n  itemData,\n  servingWeight,\n  quantity\n) {\n  const selectedQuantity = validQuantity(quantity);\n  const selectedWeightIndex = weightIndexFromServingWeight(\n    itemData,\n    servingWeight\n  );\n\n  return { ...itemData, selectedQuantity, selectedWeightIndex };\n}\n","// https://reacttraining.com/react-router/web/example/query-parameters\n\nexport default async function getQueryParamsFromHistory(history) {\n  const location = history.location;\n\n  const query = new URLSearchParams(location.search);\n  const foodId = query.get(\"food\");\n  const servingWeight = query.get(\"serv\");\n  const quantity = Number(query.get(\"qty\"));\n\n  const idToNameMap = await import(\"../fixtures/id_to_name_map.json\");\n  const foodName = idToNameMap[foodId];\n\n  return {\n    foodName,\n    servingWeight,\n    quantity,\n  };\n}\n","import React, { createContext, useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nimport formatFoodItemData, {\n  formatFoodItemDataFromQueryParams,\n} from \"./util/format_food_item_data\";\nimport getQueryParamsFromHistory from \"./util/getQueryParamsFromHistory\";\n\nconst AppContext = createContext();\n\nconst { Provider } = AppContext;\n\nconst DEFAULT_SELECTED = { selectedQuantity: 1, selectedWeightIndex: 0 };\n\nconst UrlUpdateStrategy = { REPLACE: \"REPLACE\", PUSH: \"PUSH\", NONE: \"NONE\" };\n\nexport const AppProvider = ({ children }) => {\n  const [foodItemData, setFoodItemData] = useState();\n  const [isMobile, setIsMobile] = useState(false);\n  const [displayDrawer, setDisplayDrawer] = useState(false);\n  const history = useHistory();\n\n  // run on mount only\n  useEffect(() => {\n    // add listener to history for back button\n    history.listen(() => {\n      if (history.action === \"POP\") {\n        updateFoodItemDataFromQueryParams();\n      }\n    });\n  }, []);\n\n  // run on mount only\n  useEffect(() => {\n    updateFoodItemDataFromQueryParams();\n  }, []);\n\n  function fetchFoodItemData(\n    foodItemName,\n    formatResponse = foodItemDataWithDefaultSelected,\n    urlUpdateStrategy = UrlUpdateStrategy.PUSH\n  ) {\n    setDisplayDrawer(false);\n\n    Axios.get(\n      `https://us-central1-fasttripfinder-199123.cloudfunctions.net/my-food-data-proxy/?query=data-update-nf.php?name=${foodItemName}`\n    ).then(({ data }) => {\n      formatAndUpdateFoodItemData(formatResponse(data), urlUpdateStrategy);\n    });\n  }\n\n  function updateFoodItemDataFromQueryParams() {\n    return getQueryParamsFromHistory(history).then(\n      ({ foodName, servingWeight, quantity }) => {\n        if (!foodName) {\n          setFoodItemData(null);\n          return;\n        }\n\n        const formatFromQueryParams = (itemData) =>\n          formatFoodItemDataFromQueryParams(itemData, servingWeight, quantity);\n\n        fetchFoodItemData(\n          foodName,\n          formatFromQueryParams,\n          UrlUpdateStrategy.NONE\n        );\n      }\n    );\n  }\n\n  function foodItemDataWithDefaultSelected(foodItemData) {\n    return { ...foodItemData, ...DEFAULT_SELECTED };\n  }\n\n  function formatAndUpdateFoodItemData(\n    foodItemData,\n    urlUpdateStrategy = UrlUpdateStrategy.REPLACE\n  ) {\n    const formattedFoodData = formatFoodItemData(foodItemData);\n\n    setFoodItemData(formattedFoodData);\n    updateUrlWithFood(formattedFoodData, urlUpdateStrategy);\n  }\n\n  function updateFoodWithSelectedQuantity(foodItemData, selectedQuantity) {\n    formatAndUpdateFoodItemData({\n      ...foodItemData,\n      selectedQuantity,\n    });\n  }\n\n  function updateFoodWithSelectedWeight(foodItemData, selectedWeightIndex) {\n    formatAndUpdateFoodItemData({\n      ...foodItemData,\n      selectedWeightIndex,\n    });\n  }\n\n  function updateUrlWithFood(foodItemData, urlUpdateStrategy) {\n    const { id, selectedQuantity, selectedWeightIndex } = foodItemData;\n    const servingCode = foodItemData.code_arr[selectedWeightIndex];\n\n    const queryString = `?food=${id}&serv=${servingCode}&qty=${selectedQuantity}`;\n\n    if (urlUpdateStrategy === UrlUpdateStrategy.REPLACE) {\n      history.replace(queryString);\n    } else if (urlUpdateStrategy === UrlUpdateStrategy.PUSH) {\n      history.push(queryString);\n    }\n  }\n\n  function toggleMobile() {\n    setIsMobile(!isMobile);\n  }\n\n  const clearFoodItemData = () => setFoodItemData(null);\n\n  return (\n    <Provider\n      value={{\n        foodItemData,\n        fetchFoodItemData,\n        clearFoodItemData,\n\n        updateFoodWithSelectedQuantity,\n        updateFoodWithSelectedWeight,\n\n        isMobile,\n        toggleMobile,\n\n        displayDrawer,\n        setDisplayDrawer,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport default AppContext;\n","import React, { useContext } from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport { InputNumber, Row, Col, Select } from \"antd\";\nimport { CloseOutlined } from \"@ant-design/icons\";\n\nimport _ from \"lodash\";\n\nimport \"./ServingSizeSelectionRow.scss\";\n\nconst { Option } = Select;\n\nconst MIN_QUANTITY = 1;\nconst MAX_QUANTITY = 10000;\n\nfunction ServingSizeSelectionRow({ foodItemData, className }) {\n  const {\n    updateFoodWithSelectedQuantity,\n    updateFoodWithSelectedWeight,\n  } = useContext(AppContext);\n\n  const { selectedQuantity, selectedWeightIndex } = foodItemData;\n  const servingDescriptions = foodItemData[\"desc_arr\"];\n  const servingWeights = foodItemData[\"wt_arr\"].map(_.toInteger);\n  const servings = _.zip(servingDescriptions, servingWeights).map(\n    ([description, weight]) => `${description} (${weight}g)`\n  );\n\n  const selectedWeight = servings[selectedWeightIndex];\n\n  const renderServing = (serving, index) => (\n    <Option value={index} key={serving}>\n      {serving}\n    </Option>\n  );\n\n  const updateSelectedQuantity = (selectedQuantity) => {\n    if (MIN_QUANTITY <= selectedQuantity && selectedQuantity < MAX_QUANTITY) {\n      updateFoodWithSelectedQuantity(foodItemData, selectedQuantity);\n    }\n  };\n\n  const updateSelectedWeightIndex = (selectedWeightIndex) => {\n    updateFoodWithSelectedWeight(foodItemData, selectedWeightIndex);\n  };\n\n  return (\n    <div className={className}>\n      <Row className=\"serving-size-selection-row__body\" align=\"middle\">\n        <Col span={4}>\n          <InputNumber\n            min={MIN_QUANTITY}\n            max={MAX_QUANTITY}\n            value={selectedQuantity}\n            placeholder={1}\n            onChange={updateSelectedQuantity}\n            className=\"serving-size-selection-row__serving-input\"\n          />\n        </Col>\n\n        <Col span={2}>\n          <CloseOutlined />\n        </Col>\n\n        <Col flex={1}>\n          <Select\n            value={selectedWeight}\n            className=\"serving-size-selection-row__select\"\n            style={{ width: \"100%\" }}\n            dropdownMatchSelectWidth={false}\n            onChange={updateSelectedWeightIndex}\n          >\n            {servings.map(renderServing)}\n          </Select>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default ServingSizeSelectionRow;\n","import React, { useContext } from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport { Card, Tooltip, Button } from \"antd\";\nimport { CloseOutlined } from \"@ant-design/icons\";\n\nimport ServingSizeSelectionRow from \"./ServingSizeSelectionRow\";\n\nimport _ from \"lodash\";\n\nimport \"./SidebarFoodCard.scss\";\n\nfunction SidebarFoodCard({ foodItemData }) {\n  const { clearFoodItemData } = useContext(AppContext);\n\n  const closeButton = (\n    <Tooltip title=\"close\">\n      <Button\n        type=\"link\"\n        icon={<CloseOutlined />}\n        onClick={clearFoodItemData}\n        className=\"sidebar-food-card__close-button\"\n      />\n    </Tooltip>\n  );\n\n  return (\n    <Card\n      title={foodItemData.name}\n      size=\"small\"\n      extra={closeButton}\n      className=\"sidebar-food-card\"\n    >\n      <ServingSizeSelectionRow foodItemData={foodItemData} />\n    </Card>\n  );\n}\n\nexport default SidebarFoodCard;\n","import React, { useContext } from \"react\";\n\nimport { List } from \"antd\";\nimport SidebarFoodCard from \"./SidebarFoodCard\";\nimport AppContext from \"../AppContext\";\n\nfunction SideBarFoodList() {\n  const { foodItemData } = useContext(AppContext);\n\n  if (!foodItemData) return null;\n\n  const renderListItem = (item) => (\n    <List.Item key={item.name}>\n      <SidebarFoodCard foodItemData={item} />\n    </List.Item>\n  );\n\n  return (\n    foodItemData && (\n      <List dataSource={[foodItemData]} renderItem={renderListItem} />\n    )\n  );\n}\n\nexport default SideBarFoodList;\n","import React, { useState, useContext } from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport { Select } from \"antd\";\n\nimport Axios from \"axios\";\nimport _ from \"lodash\";\n\nimport \"./Searchbar.scss\";\n\nconst { Option } = Select;\n\nfunction Searchbar() {\n  const [searchValue, setSearchValue] = useState();\n  const [foodItems, setFoodItems] = useState([]);\n\n  const { fetchFoodItemData } = useContext(AppContext);\n\n  const searchFoodItems = _.debounce(foodSearchString => {\n    setFoodItems([]);\n\n    if (_.isEmpty(foodSearchString)) {\n      setSearchValue(undefined);\n      return;\n    }\n\n    Axios.get(\n      `https://us-central1-fasttripfinder-199123.cloudfunctions.net/my-food-data-proxy/?query=name-suggest.php?q=${foodSearchString}`\n    ).then(({ data }) => {\n      const foodResponseItems = data.trim().split(\",\");\n\n      setSearchValue(foodSearchString);\n      setFoodItems(foodResponseItems.map(_.trim));\n    });\n  }, 300);\n\n  const updateSearchedValue = searchedFoodItem => {\n    console.log(\"selected: \", searchedFoodItem);\n\n    if (_.isEmpty(searchedFoodItem)) {\n      setSearchValue(undefined);\n    } else {\n      setSearchValue(searchedFoodItem);\n      fetchFoodItemData(searchedFoodItem);\n    }\n  };\n\n  const renderHighlightedFoodItem = foodItem => {\n    return (\n      <Option key={foodItem}>\n        {foodItemWithHighlights(foodItem, searchValue)}\n      </Option>\n    );\n  };\n\n  return (\n    <Select\n      allowClear\n      showSearch\n      showArrow={false}\n      value={searchValue}\n      placeholder=\"🔍 Find Another Food\"\n      notFoundContent={false}\n      filterOption={false}\n      onSearch={searchFoodItems}\n      onChange={updateSearchedValue}\n      className=\"searchbar\"\n    >\n      {foodItems.map(renderHighlightedFoodItem)}\n    </Select>\n  );\n}\n\nfunction foodItemWithHighlights(foodItem, substringToHighlight) {\n  const caseInsensitiveGlobalSearch = new RegExp(substringToHighlight, \"ig\");\n  const saltedFoodItem = _.replace(\n    foodItem,\n    caseInsensitiveGlobalSearch,\n    text => `<=>${text}<=>`\n  );\n\n  const splitText = saltedFoodItem.split(\"<=>\");\n\n  return splitText.map((substring, index) => {\n    const isHighlighting = index % 2 === 1;\n\n    if (isHighlighting) {\n      return (\n        <span key={index} className=\"highlighted\">\n          {substring}\n        </span>\n      );\n    }\n\n    return substring;\n  });\n}\n\nexport default Searchbar;\n","import React from \"react\";\n\nimport { Layout } from \"antd\";\n\nimport SidebarFoodList from \"./SidebarFoodList\";\nimport Searchbar from \"../Searchbar/Searchbar\";\n\nimport \"./Sidebar.scss\";\n\nfunction Sidebar() {\n  return (\n    <Layout className=\"sidebar\">\n      <Searchbar />\n\n      <SidebarFoodList />\n    </Layout>\n  );\n}\n\nexport default Sidebar;\n","import React, { useContext } from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport { Row } from \"antd\";\n\nimport \"./NutritionFactsTable.scss\";\n\nfunction NutritionFactsTable() {\n  const { foodItemData } = useContext(AppContext);\n\n  if (!foodItemData) return null;\n  const {\n    calories,\n    totalFat,\n    saturatedFat,\n    transFat,\n    cholesterol,\n    sodium,\n    totalCarbohydrates,\n    fiber,\n    sugar,\n    addedSugar,\n    protein,\n    vitaminC,\n    vitaminD,\n    iron,\n    calcium,\n    potassium,\n    phosphorus,\n  } = foodItemData.nutritionFactTable;\n\n  const AddedSugar = () => {\n    if (addedSugar.value === \"~\") {\n      return (\n        <Row className=\"no-sugar-added\">\n          <span>~ No added sugar data collected</span>\n          <b>~</b>\n        </Row>\n      );\n    }\n\n    return (\n      <Row className=\"no-sugar-added\">\n        <span>Includes {addedSugar.value}g Added Sugars</span>\n        <b>{addedSugar.percentage}</b>\n      </Row>\n    );\n  };\n\n  return (\n    <div className=\"nutrition-facts-table\">\n      <div className=\"facts-table-header\">\n        <b>Nutrition Facts</b>\n      </div>\n      <div className=\"facts-table-serving large-border-bottom\">\n        <div>\n          <b>Serving Size</b>\n        </div>\n        <div> 1 cup, quartered or chopped (125g)</div>\n      </div>\n\n      <Row justify=\"space-between\" className=\"calories medium-border-bottom\">\n        <span className=\"label\">Calories</span>\n        <span className=\"value\">{calories.value}</span>\n      </Row>\n\n      <Row justify=\"end\">\n        <b>% Daily Value *</b>\n      </Row>\n\n      <div className=\"chart\">\n        <Row>\n          <span>\n            <b>Total Fat</b> {totalFat.value}g\n          </span>\n          <b>{totalFat.percentage}%</b>\n        </Row>\n\n        <Row className=\"left-padding-1\">\n          <span>Saturated Fat {saturatedFat.value}g</span>\n          <b>{saturatedFat.percentage}%</b>\n        </Row>\n\n        <Row className=\"left-padding-1 thick-border-bottom\">\n          <span>\n            <em>Trans</em> Fat {transFat.value}g\n          </span>\n        </Row>\n\n        <Row className=\"thick-border-bottom\">\n          <span>\n            <b>Cholesterol</b> {cholesterol.value}mg\n          </span>\n          <b>{cholesterol.percentage}%</b>\n        </Row>\n\n        <Row>\n          <span>\n            <b>Sodium</b> {sodium.value}mg\n          </span>\n          <b>{sodium.percentage}%</b>\n        </Row>\n\n        <Row>\n          <span>\n            <b>Total Carbohydrate</b> {totalCarbohydrates.value}g\n          </span>\n          <b>{totalCarbohydrates.percentage}%</b>\n        </Row>\n\n        <Row className=\"left-padding-1 thick-border-bottom\">\n          <span>Dietary Fiber {fiber.value}g</span>\n          <b>{fiber.percentage}%</b>\n        </Row>\n\n        <Row className=\"left-padding-1\">\n          <span>Total Sugars {sugar.value}g</span>\n          <b>{sugar.percentage}%</b>\n        </Row>\n\n        <AddedSugar />\n\n        <Row className=\"large-border-bottom\">\n          <span>\n            <b>Protein</b> {protein.value}g\n          </span>\n          <b>{protein.percentage}%</b>\n        </Row>\n\n        <Row>\n          <span>Vitamin C {vitaminC.value}mg</span>\n          {vitaminC.percentage}%\n        </Row>\n\n        <Row>\n          <span>Vitamin D {vitaminD.value}mcg</span>\n          {vitaminD.percentage}%\n        </Row>\n\n        <Row>\n          <span>Iron {iron.value}mg</span>\n          {iron.percentage}%\n        </Row>\n\n        <Row>\n          <span>Calcium {calcium.value}mg</span>\n          {calcium.percentage}%\n        </Row>\n\n        <Row>\n          <span>Potassium {potassium.value}mg</span>\n          {potassium.percentage}%\n        </Row>\n\n        <Row className=\"medium-border-bottom\">\n          <span>Phosphorus {phosphorus.value}mg</span>\n          {phosphorus.percentage}%\n        </Row>\n\n        <Row className=\"facts-table-footer\">\n          *The % Daily Value (DV) tells you how much a nutrient in a serving of\n          food contributes to a daily diet. 2,000 calories a day is used for\n          general nutrition advice.\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default NutritionFactsTable;\n","import React, { useContext } from \"react\";\nimport AppContext from \"../AppContext\";\n\nimport { Row, Col } from \"antd\";\n\nimport _ from \"lodash\";\n\nimport \"./NutritionFactsHistogram.scss\";\n\nexport default function NutritionFactsHistogram() {\n  const { foodItemData } = useContext(AppContext);\n\n  if (!foodItemData) return null;\n\n  const { WATER, FAT, CHOCDF, PROCNT, ALC } = foodItemData;\n\n  const informationPresent =\n    WATER !== \"~\" && FAT !== \"~\" && CHOCDF !== \"~\" && PROCNT !== \"~\";\n\n  const water = Number(WATER);\n  const fat = Number(FAT);\n  const carbs = Number(CHOCDF);\n  const protein = Number(PROCNT);\n  const alcohol = Number(ALC);\n\n  const containsAlcohol = alcohol > 0;\n\n  const componentTotal = water + fat + carbs + protein + alcohol;\n\n  const waterPercentage = _.toInteger((water / componentTotal) * 100);\n  const fatPercentage = _.toInteger((fat / componentTotal) * 100);\n  const carbsPercentage = _.toInteger((carbs / componentTotal) * 100);\n  const proteinPercentage = _.toInteger((protein / componentTotal) * 100);\n  const alcoholPercentage = _.toInteger((alcohol / componentTotal) * 100);\n\n  return (\n    informationPresent && (\n      <div className=\"histograms\">\n        <div className=\"data-title\">What is this food made of?</div>\n        <div className=\"data-tile\">\n          <Row className=\"square\" align=\"bottom\">\n            <Col className=\"water\" style={{ height: `${waterPercentage}%` }} />\n\n            <Col className=\"fat\" style={{ height: `${fatPercentage}%` }} />\n\n            <Col className=\"carbs\" style={{ height: `${carbsPercentage}%` }} />\n\n            <Col\n              className=\"protein\"\n              style={{ height: `${proteinPercentage}%` }}\n            />\n\n            {containsAlcohol && (\n              <Col\n                className=\"alcohol\"\n                style={{ height: `${alcoholPercentage}%` }}\n              />\n            )}\n          </Row>\n\n          <Row className=\"legend\">\n            <Col>\n              <div>{waterPercentage}%</div>\n              <div>Water</div>\n            </Col>\n\n            <Col>\n              <div>{fatPercentage}%</div>\n              <div>Fat</div>\n            </Col>\n\n            <Col>\n              <div>{carbsPercentage}%</div>\n              <div>Carbs</div>\n            </Col>\n\n            <Col>\n              <div>{proteinPercentage}%</div>\n              <div>Protein</div>\n            </Col>\n\n            {containsAlcohol && (\n              <Col>\n                <div>{alcoholPercentage}%</div>\n                <div>Alcohol</div>\n              </Col>\n            )}\n          </Row>\n        </div>\n      </div>\n    )\n  );\n}\n","import React, { useContext } from \"react\";\n\nimport NutritionFactsTable from \"./NutritionFactsTable\";\nimport { Row, Drawer, Button } from \"antd\";\nimport NutritionFactsHistogram from \"./NutritionFactsHistogram\";\nimport AppContext from \"../AppContext\";\n\nimport \"./NutritionFactsPanel.scss\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport ServingSizeSelectionRow from \"../Sidebar/ServingSizeSelectionRow\";\n\nexport default function NutritionFactsPanel() {\n  const {\n    foodItemData,\n    isMobile,\n    displayDrawer,\n    setDisplayDrawer,\n  } = useContext(AppContext);\n\n  if (!foodItemData) return null;\n\n  const MobileHeader = () =>\n    isMobile && (\n      <>\n        <Button\n          className=\"facts-panel__button\"\n          size=\"large\"\n          onClick={() => setDisplayDrawer(true)}\n        >\n          🔍 Find Another Food\n        </Button>\n        <Drawer\n          title=\"Find Food!\"\n          placement=\"left\"\n          closable={true}\n          onClose={() => setDisplayDrawer(false)}\n          visible={displayDrawer}\n          style={{ width: \"100%\" }}\n        >\n          <Sidebar />\n        </Drawer>\n      </>\n    );\n\n  const MobileServingSizeSelector = () =>\n    isMobile && (\n      <div className=\"facts-panel-body\">\n        <Row\n          className=\"serving-selector\"\n          style={{ \"border-bottom\": \"1px solid #ddd\" }}\n        >\n          Serving Size:\n        </Row>\n\n        <ServingSizeSelectionRow className=\"serving-selector__selection-row\" foodItemData={foodItemData} />\n      </div>\n    );\n\n  return (\n    <div className=\"facts-panel\">\n      <MobileHeader />\n\n      <h1 className=\"facts-panel-header\">{foodItemData.name}</h1>\n      <div className=\"facts-panel-subheader\">{foodItemData.longname}</div>\n\n      <div>\n        <strong>Database: </strong>\n        {foodItemData.datatype}\n      </div>\n\n      <div>\n        <MobileServingSizeSelector />\n        <Row align=\"middle\" className=\"facts-panel-body\">\n          <NutritionFactsTable />\n          <NutritionFactsHistogram />\n        </Row>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\n\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport NutritionFactsPanel from \"./NutritionFacts/NutritionFactsPanel\";\n\nimport logo from \"./assets/logo.svg\";\n\nimport { Layout } from \"antd\";\nimport \"./App.scss\";\nimport AppContext from \"./AppContext\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nfunction App() {\n  const { toggleMobile } = useContext(AppContext);\n\n  const AppFooter = () => (\n    <>\n      <div className=\"app-footer-links\">\n        <a href=\"https://www.myfooddata.com/\">Home |</a>\n        <a href=\"https://www.myfooddata.com/contact.php\"> Contact |</a>\n        <a href=\"https://www.myfooddata.com/about.php\"> About |</a>\n        <a href=\"https://www.myfooddata.com/terms.php\"> Terms of Use |</a>\n        <a href=\"https://www.myfooddata.com/privacy.php\"> Privacy |</a>\n        <a href=\"https://www.myfooddata.com/faq.php\"> FAQ |</a>\n        <a href=\"https://www.myfooddata.com/sitemap.php\"> Sitemap</a>\n      </div>\n      <div className=\"app-footer-copyright\">© 2020 MyFoodData.com</div>\n    </>\n  );\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Header className=\"header\">\n        <a href=\"https://www.myfooddata.com\">\n          <img\n            className=\"header-logo\"\n            src={logo}\n            alt=\"my food data\"\n            height=\"100%\"\n          />\n        </a>\n      </Header>\n\n      <Layout>\n        <Sider\n          width={310}\n          breakpoint=\"md\"\n          collapsedWidth={0}\n          trigger={null}\n          onCollapse={toggleMobile}\n        >\n          <Sidebar />\n        </Sider>\n\n        <Content>\n          <NutritionFactsPanel />\n        </Content>\n      </Layout>\n\n      <Footer className=\"app-footer\">\n        <AppFooter />\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProvider } from \"./AppContext\";\nimport {BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}